#!/sbin/sh

OUTFD="/proc/self/fd/$2"
ZIP=$3

set_con() {
  chcon -h u:object_r:"$1":s0 $2
  chcon u:object_r:"$1":s0 $2
}

set_perm() {
  chmod $1 $2
}

set_owner() {
  chown $1:$2 $3
}

ui_print() {
  echo "ui_print $1" > "$OUTFD";
  echo "ui_print" > "$OUTFD";
}

cleanup() {
  ui_print "Cleaning up files"
  rm -rf $TMP/system
  rm $TMP/toybox

  ui_print "Unmounting partitions"
  umount -l "$SYSTEM_MNT"
}

error() {
  ui_print "$1"
  cleanup
  exit 1
}

error_no_space() {
  error "Not enough space for GApps! Aborting"
}

error_mounting() {
  error "Could not mount $1! Aborting"
}

get_block_for_mount_point() {
  grep -v "^#" /etc/recovery.fstab | grep "[[:blank:]]$1[[:blank:]]" | tail -n1 | tr -s [:blank:] ' ' | cut -d' ' -f1
}

find_block() {
  local name="$1"
  local fstab_entry=$(get_block_for_mount_point "/$name")
  # P-SAR hacks
  [ -z "$fstab_entry" ] && [ "$name" = "system" ] && fstab_entry=$(get_block_for_mount_point "/")
  [ -z "$fstab_entry" ] && [ "$name" = "system" ] && fstab_entry=$(get_block_for_mount_point "/system_root")

  local dev
  if [ "$DYNAMIC_PARTITIONS" = "true" ]; then
    if [ -n "$fstab_entry" ]; then
      dev="${BLK_PATH}/${fstab_entry}${SLOT_SUFFIX}"
    else
      dev="${BLK_PATH}/${name}${SLOT_SUFFIX}"
    fi
  else
    if [ -n "$fstab_entry" ]; then
      dev="${fstab_entry}${SLOT_SUFFIX}"
    else
      dev="${BLK_PATH}/${name}${SLOT_SUFFIX}"
    fi
  fi

  if [ -b "$dev" ]; then
    echo "$dev"
  fi
}

ui_print "   SwitchRoot Android 11   "
ui_print "Multi-BootAnimation Flasher"
ui_print "      Made by Lumince      "
ui_print " Animations made by Oolong "

ui_print "Extracting files"
TMP=/tmp
cd "$TMP"
unzip -o "$ZIP"
rm -rf META-INF

# Ensure system is unmounted so mounting succeeds
umount /system || umount /mnt/system || true

# Find partitions
DYNAMIC_PARTITIONS=`getprop ro.boot.dynamic_partitions`
if [ "$DYNAMIC_PARTITIONS" = "true" ]; then
    BLK_PATH="/dev/block/mapper"
else
    BLK_PATH=/dev/block/bootdevice/by-name
fi

CURRENTSLOT=`getprop ro.boot.slot_suffix`
if [ ! -z "$CURRENTSLOT" ]; then
  if [ "$CURRENTSLOT" == "_a" ]; then
    SLOT_SUFFIX="_a"
  else
    SLOT_SUFFIX="_b"
  fi
fi

SYSTEM_BLOCK=$(find_block "system")

# Disable rw protection on dynamic partitions
if [ "$DYNAMIC_PARTITIONS" = "true" ]; then
  blockdev --setrw "$SYSTEM_BLOCK"
  if [ -n "$PRODUCT_BLOCK" ]; then
    blockdev --setrw "$PRODUCT_BLOCK"
  fi
  if [ -n "$SYSTEM_EXT_BLOCK" ]; then
    blockdev --setrw "$SYSTEM_EXT_BLOCK"
  fi
fi

# Mount and define SYSTEM_OUT
SYSTEM_MNT=/mnt/system
mkdir -p "$SYSTEM_MNT" || true
if mount -o rw "$SYSTEM_BLOCK" "$SYSTEM_MNT"; then
ui_print "$SYSTEM_MNT mounted"
else
error_mounting "$SYSTEM_MNT"
fi
SYSTEM_OUT="${SYSTEM_MNT}/system"

# Ignore {product,system_ext} block devices in case they are symlinks
# This is common on devices where maintainers have chosen not to use
# real partitions because of their size being too small to be useful
if [ -L "${SYSTEM_MNT}/product" ]; then
PRODUCT_BLOCK=""
fi
if [ -L "${SYSTEM_MNT}/system_ext" ]; then
SYSTEM_EXT_BLOCK=""
fi

ui_print "Preparing files for copying"
for d in `find . -mindepth 1 -type d -type d`; do
  set_perm 0755 $d
  set_owner root root $d
done
for f in `find . -type f`; do
  type=$(echo "$f" | sed 's/.*\.//')
  if [ "$type" == "sh" ] || [ "$type" == "$f" ]; then
    set_perm 0755 $f
  else
    set_perm 0644 $f
  fi
  set_owner root root $f
  set_con system_file $f
done

ui_print "Mounting partitions"
DEVICESKU=`getprop ro.boot.hardware.sku`
if [ "$DEVICESKU" = "odin" ]; then
    ui_print "Erista Unit!"
	cd system-erista
	ui_print "Extracting into system directory"
	for d in `find . -mindepth 1 -type d -type d`; do
	  set_perm 0755 $d
	  set_owner root root $d
	done
	for f in `find . -type f`; do
	  type=$(echo "$f" | sed 's/.*\.//')
	  if [ "$type" == "sh" ] || [ "$type" == "$f" ]; then
	    set_perm 0755 $f
	  else
	    set_perm 0644 $f
	  fi
	  set_owner root root $f
	  set_con system_file $f
	done
	cp --preserve=a -r ./* "${SYSTEM_OUT}/"
fi

if [ "$DEVICESKU" = "vali" ]; then
    ui_print "Lite Unit!"
	cd system-lite
	ui_print "Extracting into system directory"
	for d in `find . -mindepth 1 -type d -type d`; do
	  set_perm 0755 $d
	  set_owner root root $d
	done
	for f in `find . -type f`; do
	  type=$(echo "$f" | sed 's/.*\.//')
	  if [ "$type" == "sh" ] || [ "$type" == "$f" ]; then
	    set_perm 0755 $f
	  else
	    set_perm 0644 $f
	  fi
	  set_owner root root $f
	  set_con system_file $f
	done
	cp --preserve=a -r ./* "${SYSTEM_OUT}/"
fi

if [ "$DEVICESKU" = "modin" ]; then
    ui_print "v2 Mariko Unit!"
	cd system-mariko
	ui_print "Extracting into system directory"
	for d in `find . -mindepth 1 -type d -type d`; do
	  set_perm 0755 $d
	  set_owner root root $d
	done
	for f in `find . -type f`; do
	  type=$(echo "$f" | sed 's/.*\.//')
	  if [ "$type" == "sh" ] || [ "$type" == "$f" ]; then
	    set_perm 0755 $f
	  else
	    set_perm 0644 $f
	  fi
	  set_owner root root $f
	  set_con system_file $f
	done
	cp --preserve=a -r ./* "${SYSTEM_OUT}/"
fi

if [ "$DEVICESKU" = "frig" ]; then
    ui_print "OLED Unit!"
	cd system-oled
	ui_print "Extracting into system directory"
	for d in `find . -mindepth 1 -type d -type d`; do
	  set_perm 0755 $d
	  set_owner root root $d
	done
	for f in `find . -type f`; do
	  type=$(echo "$f" | sed 's/.*\.//')
	  if [ "$type" == "sh" ] || [ "$type" == "$f" ]; then
	    set_perm 0755 $f
	  else
	    set_perm 0644 $f
	  fi
	  set_owner root root $f
	  set_con system_file $f
	done
	cp --preserve=a -r ./* "${SYSTEM_OUT}/"
fi

cleanup
exit 0